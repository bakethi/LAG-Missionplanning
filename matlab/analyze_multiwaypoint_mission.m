function analyze_multiwaypoint_mission(mat_file_path)
    % ANALYZE_MULTIWAYPOINT_MISSION - Advanced analysis of multiwaypoint mission data
    % 
    % Usage: analyze_multiwaypoint_mission('path/to/flight_data.mat')
    %
    % This function loads flight data from a .mat file generated by the
    % render_multiwaypoint_advanced.py script and creates comprehensive
    % visualizations and analysis specific to multiwaypoint missions.
    
    if nargin < 1
        error('Please provide the path to the flight data .mat file');
    end
    
    % Load the flight data
    fprintf('Loading flight data from: %s\n', mat_file_path);
    data = load(mat_file_path);
    
    % Extract data
    time_data = data.time_data;
    position_data = data.position_data;
    velocity_data = data.velocity_data;
    attitude_data = data.attitude_data;
    airspeed_data = data.airspeed_data;
    altitude_data = data.altitude_data;
    gforce_data = data.gforce_data;
    mass_data = data.mass_data;
    waypoint_data = data.waypoint_data;
    
    % Extract position components
    north = position_data(:, 1);
    east = position_data(:, 2);
    up = position_data(:, 3);
    
    % Extract velocity components
    vel_north = velocity_data(:, 1);
    vel_east = velocity_data(:, 2);
    vel_up = velocity_data(:, 3);
    
    % Extract attitude components
    roll = attitude_data(:, 1);
    pitch = attitude_data(:, 2);
    yaw = attitude_data(:, 3);
    
    % Calculate derived quantities
    ground_speed = sqrt(vel_north.^2 + vel_east.^2);
    total_speed = sqrt(vel_north.^2 + vel_east.^2 + vel_up.^2);
    climb_rate = vel_up;
    
    % Extract waypoint information
    waypoint_stages = [];
    waypoint_times = [];
    waypoint_steps = [];
    
    for i = 1:length(waypoint_data)
        wp_info = waypoint_data{i};
        if ~isempty(wp_info) && isstruct(wp_info)
            waypoint_stages = [waypoint_stages, wp_info.task_stage];
            waypoint_times = [waypoint_times, wp_info.time];
            waypoint_steps = [waypoint_steps, wp_info.step];
        end
    end
    
    % Find unique waypoint transitions
    unique_stages = unique(waypoint_stages);
    waypoint_transitions = [];
    transition_times = [];
    
    for stage = unique_stages
        first_occurrence = find(waypoint_stages == stage, 1, 'first');
        if ~isempty(first_occurrence)
            waypoint_transitions = [waypoint_transitions, stage];
            transition_times = [transition_times, waypoint_times(first_occurrence)];
        end
    end
    
    % Create comprehensive visualization
    create_multiwaypoint_plots(time_data, position_data, velocity_data, attitude_data, ...
                              airspeed_data, altitude_data, gforce_data, mass_data, ...
                              waypoint_transitions, transition_times, waypoint_steps);
    
    % Print mission analysis
    print_multiwaypoint_analysis(time_data, position_data, velocity_data, attitude_data, ...
                                airspeed_data, altitude_data, gforce_data, mass_data, ...
                                waypoint_transitions, transition_times);
end

function create_multiwaypoint_plots(time_data, position_data, velocity_data, attitude_data, ...
                                   airspeed_data, altitude_data, gforce_data, mass_data, ...
                                   waypoint_transitions, transition_times, waypoint_steps)
    % Create comprehensive multiwaypoint mission visualization
    
    % Extract data
    north = position_data(:, 1);
    east = position_data(:, 2);
    up = position_data(:, 3);
    
    vel_north = velocity_data(:, 1);
    vel_east = velocity_data(:, 2);
    vel_up = velocity_data(:, 3);
    
    roll = attitude_data(:, 1);
    pitch = attitude_data(:, 2);
    yaw = attitude_data(:, 3);
    
    % Calculate derived quantities
    ground_speed = sqrt(vel_north.^2 + vel_east.^2);
    total_speed = sqrt(vel_north.^2 + vel_east.^2 + vel_up.^2);
    climb_rate = vel_up;
    
    % Create figure with subplots
    figure('Name', 'Multiwaypoint Mission Analysis', 'Position', [50, 50, 1600, 1000]);
    
    % 1. 3D Flight Path with Waypoints
    subplot(2, 4, 1);
    plot3(north, east, up, 'b-', 'LineWidth', 2);
    hold on;
    plot3(north(1), east(1), up(1), 'go', 'MarkerSize', 12, 'MarkerFaceColor', 'g');
    plot3(north(end), east(end), up(end), 'ro', 'MarkerSize', 12, 'MarkerFaceColor', 'r');
    
    % Add waypoint markers
    colors = lines(length(waypoint_transitions));
    for i = 1:length(waypoint_transitions)
        % Find approximate step for this waypoint
        wp_time = transition_times(i);
        [~, closest_idx] = min(abs(time_data - wp_time));
        if closest_idx <= length(north)
            plot3(north(closest_idx), east(closest_idx), up(closest_idx), ...
                  's', 'Color', colors(i,:), 'MarkerSize', 10, 'MarkerFaceColor', colors(i,:));
            text(north(closest_idx), east(closest_idx), up(closest_idx), ...
                 sprintf('WP%d', waypoint_transitions(i)+1), 'FontSize', 8);
        end
    end
    
    xlabel('North (m)');
    ylabel('East (m)');
    zlabel('Up (m)');
    title('3D Flight Path with Waypoints');
    grid on;
    legend({'Flight Path', 'Start', 'End', 'Waypoints'}, 'Location', 'best');
    
    % 2. Ground Track with Waypoints
    subplot(2, 4, 2);
    plot(east, north, 'b-', 'LineWidth', 2);
    hold on;
    plot(east(1), north(1), 'go', 'MarkerSize', 12, 'MarkerFaceColor', 'g');
    plot(east(end), north(end), 'ro', 'MarkerSize', 12, 'MarkerFaceColor', 'r');
    
    % Add waypoint markers to ground track
    for i = 1:length(waypoint_transitions)
        wp_time = transition_times(i);
        [~, closest_idx] = min(abs(time_data - wp_time));
        if closest_idx <= length(east)
            plot(east(closest_idx), north(closest_idx), ...
                 's', 'Color', colors(i,:), 'MarkerSize', 10, 'MarkerFaceColor', colors(i,:));
            text(east(closest_idx), north(closest_idx), ...
                 sprintf('WP%d', waypoint_transitions(i)+1), 'FontSize', 8);
        end
    end
    
    xlabel('East (m)');
    ylabel('North (m)');
    title('Ground Track with Waypoints');
    grid on;
    axis equal;
    
    % 3. Altitude Profile with Waypoint Markers
    subplot(2, 4, 3);
    plot(time_data, altitude_data, 'b-', 'LineWidth', 2);
    hold on;
    
    % Add vertical lines for waypoint transitions
    for i = 1:length(transition_times)
        line([transition_times(i), transition_times(i)], [min(altitude_data), max(altitude_data)], ...
             'Color', colors(i,:), 'LineStyle', '--', 'LineWidth', 1);
        text(transition_times(i), max(altitude_data)*0.9, sprintf('WP%d', waypoint_transitions(i)+1), ...
             'Rotation', 90, 'FontSize', 8, 'Color', colors(i,:));
    end
    
    xlabel('Time (s)');
    ylabel('Altitude (m)');
    title('Altitude Profile');
    grid on;
    
    % 4. Speed Profile with Waypoint Markers
    subplot(2, 4, 4);
    plot(time_data, ground_speed, 'k-', 'LineWidth', 2, 'DisplayName', 'Ground Speed');
    hold on;
    plot(time_data, airspeed_data, 'r-', 'LineWidth', 2, 'DisplayName', 'Airspeed');
    
    % Add vertical lines for waypoint transitions
    for i = 1:length(transition_times)
        line([transition_times(i), transition_times(i)], [min(ground_speed), max(ground_speed)], ...
             'Color', colors(i,:), 'LineStyle', '--', 'LineWidth', 1);
    end
    
    xlabel('Time (s)');
    ylabel('Speed (m/s)');
    title('Speed Profile');
    legend('show');
    grid on;
    
    % 5. Attitude with Waypoint Markers
    subplot(2, 4, 5);
    plot(time_data, roll * 180/pi, 'r-', 'LineWidth', 2, 'DisplayName', 'Roll');
    hold on;
    plot(time_data, pitch * 180/pi, 'g-', 'LineWidth', 2, 'DisplayName', 'Pitch');
    plot(time_data, yaw * 180/pi, 'b-', 'LineWidth', 2, 'DisplayName', 'Yaw');
    
    % Add vertical lines for waypoint transitions
    for i = 1:length(transition_times)
        line([transition_times(i), transition_times(i)], [-180, 180], ...
             'Color', colors(i,:), 'LineStyle', '--', 'LineWidth', 1);
    end
    
    xlabel('Time (s)');
    ylabel('Angle (degrees)');
    title('Attitude');
    legend('show');
    grid on;
    
    % 6. Velocity Components
    subplot(2, 4, 6);
    plot(time_data, vel_north, 'r-', 'LineWidth', 2, 'DisplayName', 'North');
    hold on;
    plot(time_data, vel_east, 'g-', 'LineWidth', 2, 'DisplayName', 'East');
    plot(time_data, vel_up, 'b-', 'LineWidth', 2, 'DisplayName', 'Up');
    
    % Add vertical lines for waypoint transitions
    for i = 1:length(transition_times)
        line([transition_times(i), transition_times(i)], [min(vel_up), max(vel_north)], ...
             'Color', colors(i,:), 'LineStyle', '--', 'LineWidth', 1);
    end
    
    xlabel('Time (s)');
    ylabel('Velocity (m/s)');
    title('Velocity Components');
    legend('show');
    grid on;
    
    % 7. Performance Metrics
    subplot(2, 4, 7);
    yyaxis left;
    plot(time_data, gforce_data, 'g-', 'LineWidth', 2);
    ylabel('G-Force', 'Color', 'g');
    yyaxis right;
    plot(time_data, climb_rate, 'b-', 'LineWidth', 2);
    ylabel('Climb Rate (m/s)', 'Color', 'b');
    
    % Add vertical lines for waypoint transitions
    hold on;
    for i = 1:length(transition_times)
        line([transition_times(i), transition_times(i)], [min(gforce_data), max(gforce_data)], ...
             'Color', colors(i,:), 'LineStyle', '--', 'LineWidth', 1);
    end
    
    xlabel('Time (s)');
    title('Performance Metrics');
    grid on;
    
    % 8. Waypoint Timing Analysis
    subplot(2, 4, 8);
    if length(waypoint_transitions) > 1
        segment_times = diff(transition_times);
        segment_distances = [];
        
        for i = 1:length(waypoint_transitions)-1
            start_time = transition_times(i);
            end_time = transition_times(i+1);
            
            start_idx = find(time_data >= start_time, 1, 'first');
            end_idx = find(time_data <= end_time, 1, 'last');
            
            if ~isempty(start_idx) && ~isempty(end_idx) && end_idx > start_idx
                segment_path = sqrt(diff(north(start_idx:end_idx)).^2 + ...
                                   diff(east(start_idx:end_idx)).^2 + ...
                                   diff(up(start_idx:end_idx)).^2);
                segment_distances = [segment_distances, sum(segment_path)];
            else
                segment_distances = [segment_distances, 0];
            end
        end
        
        bar(1:length(segment_times), segment_times, 'FaceColor', [0.7, 0.7, 0.9]);
        xlabel('Waypoint Segment');
        ylabel('Time (s)');
        title('Time Between Waypoints');
        grid on;
        
        % Add distance labels
        for i = 1:length(segment_times)
            if i <= length(segment_distances)
                text(i, segment_times(i) + max(segment_times)*0.02, ...
                     sprintf('%.0fm', segment_distances(i)), ...
                     'HorizontalAlignment', 'center', 'FontSize', 8);
            end
        end
    else
        text(0.5, 0.5, 'Single waypoint mission', 'HorizontalAlignment', 'center');
        title('Waypoint Analysis');
    end
    
    % Adjust layout
    sgtitle('Multiwaypoint Mission Analysis Dashboard', 'FontSize', 16, 'FontWeight', 'bold');
end

function print_multiwaypoint_analysis(time_data, position_data, velocity_data, attitude_data, ...
                                     airspeed_data, altitude_data, gforce_data, mass_data, ...
                                     waypoint_transitions, transition_times)
    % Print comprehensive multiwaypoint mission analysis
    
    % Extract data
    north = position_data(:, 1);
    east = position_data(:, 2);
    up = position_data(:, 3);
    
    vel_north = velocity_data(:, 1);
    vel_east = velocity_data(:, 2);
    vel_up = velocity_data(:, 3);
    
    ground_speed = sqrt(vel_north.^2 + vel_east.^2);
    
    fprintf('\n%s\n', repmat('=', 1, 60));
    fprintf('MULTIWAYPOINT MISSION ANALYSIS\n');
    fprintf('%s\n', repmat('=', 1, 60));
    
    % Basic mission statistics
    fprintf('Mission Duration: %.1f seconds\n', time_data(end));
    fprintf('Total Waypoints: %d\n', length(waypoint_transitions));
    fprintf('Total Distance: %.1f meters\n', sum(sqrt(diff(north).^2 + diff(east).^2 + diff(up).^2)));
    fprintf('Max Altitude: %.1f meters\n', max(altitude_data));
    fprintf('Min Altitude: %.1f meters\n', min(altitude_data));
    fprintf('Max Airspeed: %.1f m/s\n', max(airspeed_data));
    fprintf('Max Ground Speed: %.1f m/s\n', max(ground_speed));
    fprintf('Max Climb Rate: %.1f m/s\n', max(vel_up));
    fprintf('Max G-Force: %.2f\n', max(gforce_data));
    fprintf('Average Airspeed: %.1f m/s\n', mean(airspeed_data));
    fprintf('Average Ground Speed: %.1f m/s\n', mean(ground_speed));
    
    % Waypoint-specific analysis
    fprintf('\n%s\n', repmat('-', 1, 40));
    fprintf('WAYPOINT PROGRESSION:\n');
    fprintf('%s\n', repmat('-', 1, 40));
    
    for i = 1:length(waypoint_transitions)
        fprintf('Waypoint %d: Reached at %.1f seconds\n', waypoint_transitions(i)+1, transition_times(i));
    end
    
    if length(waypoint_transitions) > 1
        fprintf('\n%s\n', repmat('-', 1, 40));
        fprintf('SEGMENT ANALYSIS:\n');
        fprintf('%s\n', repmat('-', 1, 40));
        
        segment_times = diff(transition_times);
        total_segments = length(segment_times);
        
        for i = 1:total_segments
            start_time = transition_times(i);
            end_time = transition_times(i+1);
            
            start_idx = find(time_data >= start_time, 1, 'first');
            end_idx = find(time_data <= end_time, 1, 'last');
            
            if ~isempty(start_idx) && ~isempty(end_idx) && end_idx > start_idx
                segment_path = sqrt(diff(north(start_idx:end_idx)).^2 + ...
                               diff(east(start_idx:end_idx)).^2 + ...
                               diff(up(start_idx:end_idx)).^2);
                segment_distance = sum(segment_path);
                avg_speed = segment_distance / segment_times(i);
                
                fprintf('Segment %d-%d: %.1fs, %.1fm, %.1f m/s avg\n', ...
                        waypoint_transitions(i)+1, waypoint_transitions(i+1)+1, ...
                        segment_times(i), segment_distance, avg_speed);
            end
        end
        
        fprintf('\nFastest Segment: %.1f seconds\n', min(segment_times));
        fprintf('Slowest Segment: %.1f seconds\n', max(segment_times));
        fprintf('Average Segment Time: %.1f seconds\n', mean(segment_times));
    end
    
    fprintf('\n%s\n', repmat('=', 1, 60));
end

% Example usage (uncomment to run with a specific file):
% analyze_multiwaypoint_mission('path/to/your/flight_data.mat');
